name: 'Terraform Plan'
env:
  terraform_version: "0.12.24"
on:
  pull_request:
    paths:
      - '!hack/**'
      - '!.github/**'
      - '.github/workflows/terraformPlan.yml'
      - 'environments/*/terraform/**'
      - 'templates/terraform/**'
jobs:
  terraform_plan:
    timeout-minutes: 30
    strategy:
      fail-fast: false
      matrix:
        include:
        - environment: dev
          vault_env: dev
          vault_role_id_secret: MONSTER_AUTH_ROLE_ID
          vault_secret_id_secret: MONSTER_AUTH_ROLE_SECRET
        - environment: hca
          vault_env: dev
          vault_role_id_secret: MONSTER_AUTH_ROLE_ID
          vault_secret_id_secret: MONSTER_AUTH_ROLE_SECRET
        - environment: hca-prod
          vault_env: prod
          vault_role_id_secret: MONSTER_PROD_AUTH_ROLE_ID
          vault_secret_id_secret: MONSTER_PROD_AUTH_ROLE_SECRET
        - environment: prod
          vault_env: prod
          vault_role_id_secret: MONSTER_PROD_AUTH_ROLE_ID
          vault_secret_id_secret: MONSTER_PROD_AUTH_ROLE_SECRET
        - environment: v2f-prod
          vault_env: prod
          vault_role_id_secret: MONSTER_PROD_AUTH_ROLE_ID
          vault_secret_id_secret: MONSTER_PROD_AUTH_ROLE_SECRET
    env:
      terraform_directory: "${{ github.workspace }}/environments/${{ matrix.environment }}/terraform"
      VAULT_ADDR: ${{ secrets.VAULT_ADDR }}
      GOOGLE_APPLICATION_CREDENTIALS: "${{ github.workspace }}/environments/gcs_sa_key.json"
      AWS_REGION: us-east-1
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
    if: "!contains( github.event.pull_request.labels.*.name, 'skip-ci')"
    name: "${{ matrix.environment }} Terraform Plan"
    runs-on: ubuntu-latest
    steps:
      - name: "${{ matrix.environment }} Checkout"
        uses: actions/checkout@v2

      - name: install terraform
        uses: hashicorp/setup-terraform@v1.2.1
        with:
          terraform_version: ${{ env.terraform_version }}

      - name: "${{ matrix.environment }} set VAULT_TOKEN"
        id: token
        run: |
          VAULT_TOKEN=$(curl \
            --request POST \
            --data '{"role_id":"'"${ROLE_ID}"'","secret_id":"'"${SECRET_ID}"'"}' \
            ${VAULT_ADDR}/v1/auth/approle/login | jq -r .auth.client_token)
          echo ::add-mask::${VAULT_TOKEN}
          echo "VAULT_TOKEN=$(echo ${VAULT_TOKEN})" >> $GITHUB_ENV
          echo ::set-output name=vault_token::${VAULT_TOKEN}
        env:
          ROLE_ID: ${{ secrets[matrix.vault_role_id_secret] }}
          SECRET_ID: ${{ secrets[matrix.vault_secret_id_secret] }}

      - name: "${{ matrix.environment }} consul-template render templates for terraform"
        uses: broadinstitute/github-action-consul-template@master
        with:
          vault-address: ${{ secrets.VAULT_ADDR }}
          vault-token: ${{ steps.token.outputs.vault_token }}
          environment: ${{ matrix.vault_env }}
          env_path: "environments"

      - name: Terraform fmt
        id: fmt
        run: terraform fmt -check -recursive -diff=true
        if: always()

      - name: "${{ matrix.environment }} - Terraform Init"
        id: init
        run: terraform init ${{ env.terraform_directory }}
        env:
          VAULT_TOKEN: ${{ steps.token.outputs.vault_token }}

      - name: "${{ matrix.environment }} - Terraform Validate"
        id: validate
        run: terraform validate -no-color ${{ env.terraform_directory }}
        if: always()
        env:
          VAULT_TOKEN: ${{ steps.token.outputs.vault_token }}

      - name: "${{ matrix.environment }} - Terraform Plan"
        id: plan
        run: TF_LOG=debug terraform plan -input=false -no-color ${{ env.terraform_directory }}
        if: always()
        env:
          VAULT_TOKEN: ${{ steps.token.outputs.vault_token }}

      - name: Outputs
        uses: actions/github-script@0.9.0
        if: github.event_name == 'pull_request'
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### ${{ matrix.environment }} - Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### ${{ matrix.environment }} - Terraform Validation ü§ñ${{ steps.validate.outputs.stdout }}
            #### ${{ matrix.environment }} - Terraform Plan üìñ\`${{ steps.plan.outcome }}\`

            <details><summary>${{ matrix.environment }} - Show Plan</summary>

            \`\`\`${process.env.PLAN}\`\`\`

            </details>

            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ env.terraform_directory }}\`, Workflow: \`${{ github.workflow }}\`*`;

            github.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })
