name: 'Terraform Plan'
env:
  terraform_version: "0.12.24"
on:
  pull_request:
    paths:
      - '!hack/**'
      - '!.github/**'
      - '.github/workflows/terraformPlan.yml'
      - 'environments/*/terraform/**'
      - 'templates/terraform/**'
jobs:
  terraform_plan:
    timeout-minutes: 30
    strategy:
      fail-fast: false
      matrix:
        include:
        - environment: dev
          vault_env: dev
          vault_role_id_secret: MONSTER_AUTH_ROLE_ID
          vault_secret_id_secret: MONSTER_AUTH_ROLE_SECRET
        - environment: hca
          vault_env: dev
          vault_role_id_secret: MONSTER_AUTH_ROLE_ID
          vault_secret_id_secret: MONSTER_AUTH_ROLE_SECRET
        - environment: hca-prod
          vault_env: prod
          vault_role_id_secret: MONSTER_PROD_AUTH_ROLE_ID
          vault_secret_id_secret: MONSTER_PROD_AUTH_ROLE_SECRET
        - environment: prod
          vault_env: prod
          vault_role_id_secret: MONSTER_PROD_AUTH_ROLE_ID
          vault_secret_id_secret: MONSTER_PROD_AUTH_ROLE_SECRET
        - environment: v2f-prod
          vault_env: prod
          vault_role_id_secret: MONSTER_PROD_AUTH_ROLE_ID
          vault_secret_id_secret: MONSTER_PROD_AUTH_ROLE_SECRET
    env:
      VAULT_ADDR: ${{ secrets.VAULT_ADDR }}
      GOOGLE_APPLICATION_CREDENTIALS: "${{ github.workspace }}/environments/gcs_sa_key.json"
      AWS_REGION: us-east-1
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
    if: "!contains( github.event.pull_request.labels.*.name, 'skip-ci')"
    name: "${{ matrix.environment }} Terraform Plan"
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: "${{ matrix.environment }} Set up Terraform"
        id: set-up
        uses: ./.github/actions/set_up_terraform
        with:
          environment: "${{ matrix.environment }}"
          vault_env: "${{ matrix.vault_env }}"
          vault_role_id_secret: "${{ matrix.vault_role_id_secret }}"
          vault_secret_id_secret: "${{ matrix.vault_secret_id_secret }}"

      - name: Terraform fmt
        id: fmt
        run: terraform fmt -check -recursive -diff=true

      - name: "${{ matrix.environment }} - Terraform Validate"
        id: validate
        run: terraform validate -no-color ${{ steps.set-up.outputs.terraform_directory }}
        if: always()
        env:
          VAULT_TOKEN: ${{ steps.set-up.outputs.vault_token }}

      - name: "${{ matrix.environment }} - Terraform Plan"
        id: plan
        run: TF_LOG=debug terraform plan -input=false -no-color ${{ steps.set-up.outputs.terraform_directory }}
        if: always()
        env:
          VAULT_TOKEN: ${{ steps.set-up.outputs.vault_token }}

      - name: Outputs
        uses: actions/github-script@0.9.0
        if: github.event_name == 'pull_request'
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### ${{ matrix.environment }} - Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### ${{ matrix.environment }} - Terraform Validation ü§ñ${{ steps.validate.outputs.stdout }}
            #### ${{ matrix.environment }} - Terraform Plan üìñ\`${{ steps.plan.outcome }}\`

            <details><summary>${{ matrix.environment }} - Show Plan</summary>

            \`\`\`${process.env.PLAN}\`\`\`

            </details>

            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ steps.set-up.outputs.terraform_directory }}\`, Workflow: \`${{ github.workflow }}\`*`;

            github.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })
