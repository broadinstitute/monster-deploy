#!/usr/bin/env bash
set -euo pipefail

declare -r SCRIPT_DIR=$(cd $(dirname ${0}) >/dev/null 2>&1 && pwd)
declare -r REPO_ROOT=$(cd $(dirname ${SCRIPT_DIR}) >/dev/null 2>&1 && pwd)

source ${SCRIPT_DIR}/common.sh

declare -r HELM_CHARTS_DIR=${REPO_ROOT}/templates/helm

#####
## Configure Helm in Docker
#####
function configure_helm () {
  local -r kubeconfig=$1 helm_dir=$2

  declare -ra helm=(
    docker run
    --rm -it
    # Configure the client to point at the cluster.
    -v ${kubeconfig}:/root/.kube/config:ro
    # Make sure it can auth with GKE.
    -v ${HOME}/.config/gcloud:/root/.config/gcloud:ro
    # Persist Helm config across container runs.
    -v ${helm_dir}/plugins:/root/.local/share/helm/plugins
    -v ${helm_dir}/config:/root/.config/helm
    -v ${helm_dir}/cache:/root/.cache/helm
    # Make our local charts available.
    -v ${HELM_CHARTS_DIR}:/charts
    ${HELM}
  )
  echo ${helm[@]}
}

#####
## Set up Google's CloudSQL Proxy to communicate with the CloudSQL database.
#####
function install_cloudsql_proxy () {
  local -r kubeconfig=$1 env_dir=$2 env=$3

  # Configure helm
  local -ra helm=($(configure_helm ${kubeconfig} ${env_dir}))

  # Read cloudsql configuration info from vault
  local -r vault_location=secret/dsde/monster/${env}/command-center/cloudsql/instance
  local -r name=$(vault read -field=name $vault_location)
  local -r region=$(vault read -field=region $vault_location)
  local -r project=$(vault read -field=project $vault_location)

  local -r vault_sa_location=secret/dsde/monster/${env}/command-center/service-accounts/command-center-proxy-runner

  # Add helm repo
  ${helm[@]} repo add datarepo-helm https://broadinstitute.github.io/datarepo-helm

  # Write CloudSQL connection secrets to GKE
  ${helm[@]} upgrade --install sqlproxy-secret datarepo-helm/create-secret-manager-secret --namespace cloudsql-proxy \
    --version=0.0.5 \
    --set secrets[0].secretName=cloudsqlkey \
    --set secrets[0].vals[0].kubeSecretKey=cloudsqlkey.json \
    --set secrets[0].vals[0].path=$vault_sa_location \
    --set secrets[0].vals[0].vaultKey=key

  # Install and upgrade CloudSQL Proxy
  ${helm[@]} upgrade --install pg-sqlproxy datarepo-helm/gcloud-sqlproxy --namespace cloudsql-proxy \
    --version=0.19.4 \
    --set cloudsql.instances[0].instance=$name \
    --set cloudsql.instances[0].project=$project \
    --set cloudsql.instances[0].region=$region \
    --set cloudsql.instances[0].port=5432 -i \
    --set rbac.create=true \
    --set existingSecret=cloudsqlkey \
    --set existingSecretKey=cloudsqlkey.json
}

#####
## TODO
#####
function run_command_center_release () {
  echo TODO
}

#####
## TODO
#####
function run_processing_release () {
  local -r kubeconfig=$1 env=$2 helm_dir=$3

  local -ra helm=($(configure_helm ${kubeconfig} ${helm_dir}))
  local -r bootstrap_secret_name=secret/dsde/monster/${env}/approle-monster-${env}

  ${helm[@]} dependency update /charts/crd-operators
  ${helm[@]} upgrade crd-operators /charts/crd-operators \
   --namespace fluxcd \
   --install \
   --set "secretManager.roleId=$(vault read -field=role_id ${bootstrap_secret_name})" \
   --set "secretManager.secretId=$(vault read -field=secret_id ${bootstrap_secret_name})" \
   --set "secretManager.namespace=secrets-manager"
}

#####
## Entrypoint to the script.
##
## Ensures all expected Helm charts are released to the
## command-center and processing clusters within a core
## Monster environment.
#####
function main () {
  # Check args.
  if [ $# -ne 1 ]; then
    1>&2 echo Usage: ${0} '<env>'
    exit 1
  fi

  # Make sure config exists.
  local -r env=$1
  local -r env_dir=${REPO_ROOT}/environments/${env}
  if [ ! -d ${env_dir} ]; then
    1>&2 echo Error: Invalid environment "'$1'"
    exit 1
  fi

  local -r config_dir=${env_dir}/.kubeconfig
  local -r processing_config_dir=${config_dir}/processing
  mkdir -p ${processing_config_dir}

  local -r helm_dir=${env_dir}/.helm
  mkdir -p ${helm_dir}

  # Pull the names of expected processing projects from Vault.
  local -ra project_names=($(get_processing_names ${env}))

  # Push releases to the command center.
  local -r center_config=${config_dir}/command-center
  get_command_center_config ${env} ${center_config}
  run_command_center_release ${center_config} ${env} ${helm_dir}

  # Push releases to processing projects.
  for project in ${project_names[@]}; do
    local -r project_config=${processing_config_dir}/${project}
    get_processing_config ${env} ${project} ${project_config}
    run_processing_release ${project_config} ${env} ${helm_dir}
  done
}

main ${@}
